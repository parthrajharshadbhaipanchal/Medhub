package org.asdc.medhub.IntegrationTests;import org.asdc.medhub.Controller.BlogsController;import org.asdc.medhub.Repository.UserRepository;import org.asdc.medhub.Service.BlogsService;import org.asdc.medhub.Utility.Model.RequestModels.BlogsModel;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.MockitoAnnotations;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.context.ActiveProfiles;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.web.servlet.MockMvc;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import com.fasterxml.jackson.databind.ObjectMapper;import java.sql.Timestamp;import java.time.Instant;@WebMvcTest(excludeAutoConfiguration = SecurityAutoConfiguration.class)@ContextConfiguration(classes = {BlogsController.class})@AutoConfigureMockMvc(addFilters = false)@ActiveProfiles("test")public class BlogsIntegrationTests {    Timestamp timestamp = Timestamp.from(Instant.now());    @Autowired    private MockMvc mockMvc;    @MockBean    BlogsService blogsService;    @MockBean    UserRepository userRepository;    @BeforeEach    void setup() {        MockitoAnnotations.openMocks(this);    }    @Test    public void testCreateBlog() throws Exception {        BlogsModel blogsModel= new BlogsModel("Title","Description",timestamp);        mockMvc.perform(post("/blogs/create-blog")                        .contentType(MediaType.APPLICATION_JSON)                        .content(asJsonString(blogsModel)))                        .andExpect(status().isOk())                        .andReturn();    }    @Test    public void testGetAllBlogsPosts() throws Exception {        mockMvc.perform(get("/blogs/get-blogs"))                .andExpect(status().isOk())                .andReturn();    }    @Test    public void testGetAllBlogsPostsForPatients() throws Exception {        int doctorId = 123;        mockMvc.perform(get("/blogs/get-patient-blogs").param("doctorId", String.valueOf(doctorId)))                .andExpect(status().isOk())                .andReturn();    }    private String asJsonString(Object object) {        try {            return new ObjectMapper().writeValueAsString(object);        } catch (Exception e) {            throw new RuntimeException(e);        }    }}