package org.asdc.medhub.IntegrationTests;import com.fasterxml.jackson.databind.ObjectMapper;import org.asdc.medhub.Controller.AuthController;import org.asdc.medhub.Repository.UserRepository;import org.asdc.medhub.Service.AuthService;import org.asdc.medhub.Service.EmailService;import org.asdc.medhub.Service.Interface.IJwtService;import org.asdc.medhub.Service.Interface.IPatientService;import org.asdc.medhub.Utility.Enums.UserRole;import org.asdc.medhub.Utility.Model.ResponseModel;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.MockitoAnnotations;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.context.ActiveProfiles;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.web.servlet.MockMvc;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@WebMvcTest(excludeAutoConfiguration = SecurityAutoConfiguration.class)@ContextConfiguration(classes = {AuthController.class , AuthService.class ,IJwtService.class})@AutoConfigureMockMvc(addFilters = false)@ActiveProfiles("test")public class AuthIntegrationTests {    @Autowired    private MockMvc mockMvc;    @MockBean    UserRepository userRepository;    @MockBean    IJwtService jwtService;    @MockBean    EmailService emailService;    @MockBean    AuthService authService;    @MockBean    IPatientService patientService;    @BeforeEach    void setup() {        MockitoAnnotations.openMocks(this);    }    @Test    public void testVerifyEmail() throws Exception {        String email = "test@example.com";        String token = "dummyToken";        mockMvc.perform(post("/auth/verify-email")                        .param("email", email)                        .param("token", token))                        .andExpect(status().isOk());    }    @Test    public void testGetMedicalSpecializationsByName() throws Exception {        String searchString = "surgery";        List<String> specializations = Arrays.asList("Cardiac Surgery", "Plastic Surgery", "Neurosurgery");        ResponseModel<List<String>> response = new ResponseModel<>();        response.setResponseData(specializations);        mockMvc.perform(get("/auth/search-specializations")                        .param("searchString", searchString))                        .andExpect(status().isOk());    }    @Test    public void testResetPassword() throws Exception {        Map<String, String> requestBody = new HashMap<>();        requestBody.put("email", "test@example.com");        requestBody.put("token", "testToken");        requestBody.put("newPassword", "newPassword123");        mockMvc.perform(post("/auth/reset-password")                        .contentType(MediaType.APPLICATION_JSON)                        .content(asJsonString(requestBody)))                        .andExpect(status().isOk())                         .andReturn();    }    @Test    public void testForgotPassword() throws Exception {        Map<String, String> requestBody = new HashMap<>();        requestBody.put("email", "test@example.com");        mockMvc.perform(post("/auth/forgot-password")                        .contentType(MediaType.APPLICATION_JSON)                        .content(asJsonString(requestBody)))                .andExpect(status().isOk())                .andReturn();    }    private String asJsonString(Object object) {        try {            return new ObjectMapper().writeValueAsString(object);        } catch (Exception e) {            throw new RuntimeException(e);        }    }}