package org.asdc.medhub.IntegrationTests;import org.asdc.medhub.Controller.AdminController;import org.asdc.medhub.Repository.UserRepository;import org.asdc.medhub.Service.AdminService;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.MockitoAnnotations;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.context.ActiveProfiles;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.web.servlet.MockMvc;import com.fasterxml.jackson.databind.ObjectMapper;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import java.util.HashMap;import java.util.Map;@WebMvcTest(excludeAutoConfiguration = SecurityAutoConfiguration.class)@ContextConfiguration(classes = {AdminController.class , AdminService.class})@AutoConfigureMockMvc(addFilters = false)@ActiveProfiles("test")public class AdminIntegrationTest {    @Autowired    private MockMvc mockMvc;   @MockBean   private AdminService adminService;   @MockBean   private UserRepository userRepository;    @BeforeEach    void setup() {        MockitoAnnotations.openMocks(this);    }    @Test    public void testGetAdminUnverifiedDoctors() throws Exception {        mockMvc.perform(get("/admin/dashboard/unverified_doctors"))                .andExpect(status().isOk())                .andReturn();    }    @Test    public void testGetAdminUnverifiedDoctorDetails() throws Exception {        String email = "test@example.com";        Map<String, String> requestBody = new HashMap<>();        requestBody.put("email", email);        mockMvc.perform(post("/admin/dashboard/unverified_doctors/details")                        .content(asJsonString(requestBody))                        .contentType(MediaType.APPLICATION_JSON)                        .accept(MediaType.APPLICATION_JSON)                )                .andExpect(status().isOk())                .andReturn();    }    @Test    public void testGetAdminUnverifiedPharmacists() throws Exception {        mockMvc.perform(get("/admin/dashboard/unverified_pharmacists"))                .andExpect(status().isOk())                .andReturn();    }    @Test    public void testGetAdminUnverifiedPharmacistDetails() throws Exception {        String email = "test@example.com";        Map<String, String> requestBody = new HashMap<>();        requestBody.put("email", email);        mockMvc.perform(post("/admin/dashboard/unverified_pharmacists/details")                        .contentType(MediaType.APPLICATION_JSON)                        .content(asJsonString(requestBody)))                        .andExpect(status().isOk())                        .andReturn();    }    @Test    public void testApproveUserByAdmin() throws Exception {        String email = "test@example.com";        Map<String, String> requestBody = new HashMap<>();        requestBody.put("email", email);        mockMvc.perform(post("/admin/dashboard/approve")                        .contentType(MediaType.APPLICATION_JSON)                        .content(asJsonString(requestBody)))                        .andExpect(status().isOk())                        .andReturn();    }    @Test    public void testRejectUserByAdmin() throws Exception {        String email = "test@example.com";        Map<String, String> requestBody = new HashMap<>();        requestBody.put("email", email);        mockMvc.perform(post("/admin/dashboard/reject")                        .contentType(MediaType.APPLICATION_JSON)                        .content(asJsonString(requestBody)))                .andExpect(status().isOk());    }    private String asJsonString(Object object) {        try {            return new ObjectMapper().writeValueAsString(object);        } catch (Exception e) {            throw new RuntimeException(e);        }    }}